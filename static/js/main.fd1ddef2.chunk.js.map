{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","useState","row","renderSquare","i","lines","includes","squares","element","map","key","Game","status","history","Array","fill","stepNumber","xIsNext","isStart","player","operatorClick","backStep","lastX","lastO","state","setState","current","winner","calculateWinner","moves","step","move","desc","jumpTo","playerWin","length","slice","concat","handleClick","a","b","c","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd1ddef2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nfunction Square(props) {\r\n  return (\r\n    <button className={\"square \" + props.className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\nfunction Board(props) {\r\n  const [row, setRow] = useState([0, 1, 2]);\r\n  const renderSquare = (i) => {\r\n    let className = props.lines.includes(i) ? \"square-win\" : \"\";\r\n    if (props.squares[i]) {\r\n      className += props.squares[i] === \"X\" ? \" square-x\" : \" square-o\";\r\n    }\r\n    return (\r\n      <Square\r\n        className={className}\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n  const element = row.map((value) => (\r\n    <div key={value} className=\"board-row\">\r\n      {renderSquare((value % 3) * 3)}\r\n      {renderSquare((value % 3) * 3 + 1)}\r\n      {renderSquare((value % 3) * 3 + 2)}\r\n    </div>\r\n  ));\r\n  return <div>{element}</div>;\r\n}\r\nfunction Game(props) {\r\n  const [state, setState] = useState({\r\n    history: [{ squares: Array(9).fill(null) }],\r\n    stepNumber: 0,\r\n    xIsNext: true,\r\n    isStart: false,\r\n    player: null,\r\n    operatorClick: false,\r\n    // position: 0,\r\n    backStep: null,\r\n    lastX: null,\r\n    lastO: null,\r\n  });\r\n  let handleClick = (i) => {\r\n    // let position ;\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = state.xIsNext ? \"X\" : \"O\";\r\n    setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !state.xIsNext,\r\n    });\r\n  };\r\n  let jumpTo = (step) => {\r\n    setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  };\r\n  const history = state.history;\r\n  const current = history[state.stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n  const moves = history.map((step, move) => {\r\n    const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.playerWin;\r\n  } else {\r\n    if (history.length > 9) status = \"No winner: X and O tied \";\r\n    else status = \"Next player: \" + (state.xIsNext ? \"X\" : \"O\");\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          lines={winner ? winner.lines : []}\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// ========================================\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        playerWin: squares[a],\r\n        lines: lines[i],\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n//ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}