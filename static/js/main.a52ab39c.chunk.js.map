{"version":3,"sources":["index.js"],"names":["Square","className","this","props","onClick","value","React","Component","Board","i","lines","includes","squares","element","map","key","renderSquare","Game","position","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","move","desc","jumpTo","playerWin","handleClick","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a52ab39c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nclass Square extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className={\"square \" + this.props.className}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    let className = this.props.lines.includes(i) ? \"square-win\" : \"\";\r\n    if (this.props.squares[i]) {\r\n      className += this.props.squares[i] === \"X\" ? \" square-x\" : \" square-o\";\r\n    }\r\n\r\n    return (\r\n      <Square\r\n        className={className}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let row = [0, 1, 2];\r\n    const element = row.map((value) => (\r\n      <div key={value} className=\"board-row\">\r\n        {this.renderSquare((value % 3) * 3)}\r\n        {this.renderSquare((value % 3) * 3 + 1)}\r\n        {this.renderSquare((value % 3) * 3 + 2)}\r\n      </div>\r\n    ));\r\n    return <div>{element}</div>;\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.position = 0;\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    this.position = i;\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner.playerWin;\r\n    } else {\r\n      if (history.length > 9) status = \"No winner: X and O tied \";\r\n      else status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            lines={winner ? winner.lines : []}\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        playerWin: squares[a],\r\n        lines: lines[i],\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"sourceRoot":""}